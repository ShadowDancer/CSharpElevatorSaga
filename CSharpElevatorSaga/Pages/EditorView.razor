@using Microsoft.CodeAnalysis
@inject IJSRuntime JS
@inject Compiler Compiler

<div class="editor-contianer">
    <MonacoEditor @ref="_editor" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions" />

    <div class="compile-button-container">
        <span class="compile-button" @onclick="CompileCode">Compile</span>
        <label class="@("compilation-result-label " + CompileColorText)">@CompileLabel</label>
    </div>
    
        <EditorDiagnosticsView Diagnostics=@Diagnostics />

</div>

@code {

    private MonacoEditor _editor { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "javascript",
                GlyphMargin = true,
                Value = @"static void Run(IElevator[] elevators, IFloor[] floors)
{
    var elevator = elevators.First();

    elevator.OnIdle += () => {
        elevator.DestinationQueue.Add(1);
    };

    // Put code here
}"
            };
    }

    private async Task CompileCode()
    {
        var code = await _editor.GetValue();
        var result = await Compiler.CompileCodeAsync(code);
        CompilationSuccess = result.Success;
        Diagnostics = result.Diagnostics;

        if (result.Success == true)
        {
            GameController.RunProgram(result.Program);
        }
    }

    private bool? CompilationSuccess { get; set; } = null;

    private string CompileLabel => CompilationSuccess == true ? "Compiled successfully!" : CompilationSuccess == false ? "Build finished with errors!" : "";

    private string CompileColorText => CompilationSuccess == true ? "compilation-success" : CompilationSuccess == false ? "compilation-failure" : "";

    private IReadOnlyList<Diagnostic> Diagnostics { get; set; } = new List<Diagnostic>();


    [Parameter, EditorRequired]
    public GameController GameController { get; set; } = null!;

}
